//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/Player Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input Actions"",
    ""maps"": [
        {
            ""name"": ""Player General Inputs"",
            ""id"": ""55dedc6c-89fe-4b05-bd9d-d62b2bef30a3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""fb33cecf-47ba-4af5-9c20-4e360e7157e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""c813d559-44f5-48f1-9530-3c47259a9f10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""0a2fabb8-f637-4a21-8561-be2505ddb4c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Invetory"",
                    ""type"": ""Button"",
                    ""id"": ""bef3db52-2559-4281-86e2-2e6db63a268d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Button"",
                    ""id"": ""3250b800-5c4d-4eb2-836e-4936e6b9ff09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotkey 1"",
                    ""type"": ""Button"",
                    ""id"": ""09da0615-dd48-4c86-8f72-f8fd85ff582d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotkey 2"",
                    ""type"": ""Button"",
                    ""id"": ""b575c40e-6309-40e9-947f-30fb5aae2a53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotkey 3"",
                    ""type"": ""Button"",
                    ""id"": ""7d66c46a-53bb-4719-bc2a-5d1df8a71f84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4ecd02c2-ab95-4377-86d9-6b3e78f88c15"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""826cc16c-9f64-4123-be94-b0c9fdcdc3b6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cb183f04-80e0-411c-989a-02b717953022"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5ffff7e5-f6da-47ce-afda-4a930da25376"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2785be4b-022c-4d46-95ee-7ead10b8d435"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f2b4787e-04c8-4fe8-b2d8-22ac48b78aed"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fcc7d54-2106-4ebf-b7f3-97e9e73e9160"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1673dbb4-f71f-4552-b040-192f61dfd4e4"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Invetory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7ae2e84-574b-4cac-9f19-c3675fa2a266"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e47fc07a-4a0b-4f38-831b-6f9c7f4fac33"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotkey 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cc2825e-a552-42f1-b4a1-c8d0f73d5b9d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotkey 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""baa38bae-10ed-419d-842e-c5d1dfa372e4"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotkey 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player General Inputs
        m_PlayerGeneralInputs = asset.FindActionMap("Player General Inputs", throwIfNotFound: true);
        m_PlayerGeneralInputs_Movement = m_PlayerGeneralInputs.FindAction("Movement", throwIfNotFound: true);
        m_PlayerGeneralInputs_Cancel = m_PlayerGeneralInputs.FindAction("Cancel", throwIfNotFound: true);
        m_PlayerGeneralInputs_Interact = m_PlayerGeneralInputs.FindAction("Interact", throwIfNotFound: true);
        m_PlayerGeneralInputs_Invetory = m_PlayerGeneralInputs.FindAction("Invetory", throwIfNotFound: true);
        m_PlayerGeneralInputs_Walk = m_PlayerGeneralInputs.FindAction("Walk", throwIfNotFound: true);
        m_PlayerGeneralInputs_Hotkey1 = m_PlayerGeneralInputs.FindAction("Hotkey 1", throwIfNotFound: true);
        m_PlayerGeneralInputs_Hotkey2 = m_PlayerGeneralInputs.FindAction("Hotkey 2", throwIfNotFound: true);
        m_PlayerGeneralInputs_Hotkey3 = m_PlayerGeneralInputs.FindAction("Hotkey 3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player General Inputs
    private readonly InputActionMap m_PlayerGeneralInputs;
    private IPlayerGeneralInputsActions m_PlayerGeneralInputsActionsCallbackInterface;
    private readonly InputAction m_PlayerGeneralInputs_Movement;
    private readonly InputAction m_PlayerGeneralInputs_Cancel;
    private readonly InputAction m_PlayerGeneralInputs_Interact;
    private readonly InputAction m_PlayerGeneralInputs_Invetory;
    private readonly InputAction m_PlayerGeneralInputs_Walk;
    private readonly InputAction m_PlayerGeneralInputs_Hotkey1;
    private readonly InputAction m_PlayerGeneralInputs_Hotkey2;
    private readonly InputAction m_PlayerGeneralInputs_Hotkey3;
    public struct PlayerGeneralInputsActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerGeneralInputsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerGeneralInputs_Movement;
        public InputAction @Cancel => m_Wrapper.m_PlayerGeneralInputs_Cancel;
        public InputAction @Interact => m_Wrapper.m_PlayerGeneralInputs_Interact;
        public InputAction @Invetory => m_Wrapper.m_PlayerGeneralInputs_Invetory;
        public InputAction @Walk => m_Wrapper.m_PlayerGeneralInputs_Walk;
        public InputAction @Hotkey1 => m_Wrapper.m_PlayerGeneralInputs_Hotkey1;
        public InputAction @Hotkey2 => m_Wrapper.m_PlayerGeneralInputs_Hotkey2;
        public InputAction @Hotkey3 => m_Wrapper.m_PlayerGeneralInputs_Hotkey3;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGeneralInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGeneralInputsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerGeneralInputsActions instance)
        {
            if (m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnMovement;
                @Cancel.started -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnCancel;
                @Interact.started -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnInteract;
                @Invetory.started -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnInvetory;
                @Invetory.performed -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnInvetory;
                @Invetory.canceled -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnInvetory;
                @Walk.started -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnWalk;
                @Hotkey1.started -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnHotkey1;
                @Hotkey1.performed -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnHotkey1;
                @Hotkey1.canceled -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnHotkey1;
                @Hotkey2.started -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnHotkey2;
                @Hotkey2.performed -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnHotkey2;
                @Hotkey2.canceled -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnHotkey2;
                @Hotkey3.started -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnHotkey3;
                @Hotkey3.performed -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnHotkey3;
                @Hotkey3.canceled -= m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface.OnHotkey3;
            }
            m_Wrapper.m_PlayerGeneralInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Invetory.started += instance.OnInvetory;
                @Invetory.performed += instance.OnInvetory;
                @Invetory.canceled += instance.OnInvetory;
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Hotkey1.started += instance.OnHotkey1;
                @Hotkey1.performed += instance.OnHotkey1;
                @Hotkey1.canceled += instance.OnHotkey1;
                @Hotkey2.started += instance.OnHotkey2;
                @Hotkey2.performed += instance.OnHotkey2;
                @Hotkey2.canceled += instance.OnHotkey2;
                @Hotkey3.started += instance.OnHotkey3;
                @Hotkey3.performed += instance.OnHotkey3;
                @Hotkey3.canceled += instance.OnHotkey3;
            }
        }
    }
    public PlayerGeneralInputsActions @PlayerGeneralInputs => new PlayerGeneralInputsActions(this);
    public interface IPlayerGeneralInputsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnInvetory(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
        void OnHotkey1(InputAction.CallbackContext context);
        void OnHotkey2(InputAction.CallbackContext context);
        void OnHotkey3(InputAction.CallbackContext context);
    }
}
